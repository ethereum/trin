version: 2.1
commands:
  setup-and-restore-sccache-cache:
    steps:
      - run:
          name: Install sccache
          command: |
            wget https://github.com/mozilla/sccache/releases/download/v0.4.2/sccache-v0.4.2-x86_64-unknown-linux-musl.tar.gz \
            && tar xzf sccache-v0.4.2-x86_64-unknown-linux-musl.tar.gz \
            && mkdir -p $HOME/.local/bin\
            && mv sccache-v0.4.2-x86_64-unknown-linux-musl/sccache $HOME/.local/bin/sccache \
            && chmod +x $HOME/.local/bin/sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="$HOME/.local/bin/sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            $HOME/.local/bin/sccache --version
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
  checkout-submodules:
    steps:
      - run: 
          name: Checkout submodules
          command: |
            git submodule sync
            git submodule update --init
  install-depends:
    steps:
      - run:
          name: Prepare for apt upgrades
          command: sudo apt update
      - run:
          name: Install libclang
          command: sudo apt install clang
orbs:
  rust: circleci/rust@1.6.0
  win: circleci/windows@5.0
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: portalnetwork/trin
    docker:
      - image: cimg/rust:1.75.0
  docker-nightly:
    docker:
      - image: rustlang/rust:nightly
jobs:
  docker-build:
    resource_class: xlarge
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          no_output_timeout: 30m
          command: docker build -f ./docker/Dockerfile -t $IMAGE_NAME:latest --build-arg GIT_HASH=$CIRCLE_SHA1 .
      - run:
          name: Check that Docker container has no defects
          command: docker run $IMAGE_NAME:latest -h
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish docker image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  docker-build-bridge:
    resource_class: xlarge
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Clone portal-accumulators
          command: git clone https://github.com/ethereum/portal-accumulators
      - run:
          name: Build Docker bridge image
          no_output_timeout: 30m
          command: docker build -f ./docker/Dockerfile.bridge -t $IMAGE_NAME:latest-bridge --build-arg GIT_HASH=$CIRCLE_SHA1 .
      - run:
          name: Archive Docker image
          command: docker save -o bridge-image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./bridge-image.tar
  docker-publish-bridge:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/bridge-image.tar
      - run:
          name: Publish docker image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest-bridge
  cargo-fmt:
    description: |
      Check linting with rustfmt.
    resource_class: xlarge
    executor: docker-nightly
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - run:
          name: Prepare for apt upgrades
          command: apt update
      - run:
          name: Install libclang
          command: apt install -y clang
      - run:
          name: Install rustfmt
          command: rustup component add rustfmt     
      - run:
          name: Run rustfmt
          command: cargo +nightly fmt --all -- --check
  cargo-clippy:
    description: |
      Check linting with Clippy.
    resource_class: xlarge
    executor:
      name: rust/default
      tag: 1.75.0
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - install-depends
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - setup-and-restore-sccache-cache
      - run:
          name: Run Clippy
          command: cargo clippy --all --all-targets --all-features --no-deps -- --deny warnings
      - save-sccache-cache
  build:
    description: |
      Build the crate.
    resource_class: xlarge
    executor:
      name: rust/default
      tag: 1.75.0
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - install-depends
      - setup-and-restore-sccache-cache
      - run:
          name: Build Trin workspace
          command: cargo build --workspace
      - save-sccache-cache
  check-windows:
    description: |
      Check the crate on Windows (Check will tell us if we can build on Windows without the need to codegen (which is the time consuming part)).
    executor:
      name: win/default
      size: xlarge
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - run:
          name: Check Trin workspace
          # We are running all these together because this version of circleci windows has an environment variable bug
          # https://discuss.circleci.com/t/march-2022-beta-support-for-new-operating-system-for-windows-executors-windows-server-2022/43198/44
          command: |
            choco uninstall rust
            choco install rust-ms llvm -y
            cargo check --workspace
  test:
    description: |
      Run tests.
    resource_class: 2xlarge
    executor:
      name: rust/default
      tag: 1.75.0
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - checkout-submodules
      - install-depends
      - setup-and-restore-sccache-cache
      - run:
          name: Test Trin workspace
          command: cargo test --workspace -- --nocapture
      - save-sccache-cache
  utp-test:
    description: |
      Run uTP network simulator
    machine:
      image: ubuntu-2204:current
    resource_class: xlarge
    environment:
      RUSTFLAGS: "-D warnings"
      RUST_LOG: "debug"
    steps:
      - checkout
      - run:
          name: Update package sources
          command: sudo apt update
      - run:
          name: Install libclang
          command: sudo NEEDRESTART_MODE=a apt install clang
      - run:
          name: Install modprobe
          command: sudo apt install -y kmod
      - run:
          name: Load iptables6 kernel modules
          command: sudo modprobe ip6table_filter
      - run:
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - setup-and-restore-sccache-cache
      - run:
          name: Build utp-testing package
          command: cargo build --workspace --release
      - save-sccache-cache
      - run:
          name: Move docker artifacts
          command: mv -t utp-testing/docker/circleci/ target/release/utp-test-app utp-testing/docker/run_endpoint.sh utp-testing/docker/setup.sh
      - run:
          name: Build uTP Test App container
          command: docker build -t test-utp --no-cache utp-testing/docker/circleci/
      - run:
          name: Run Test App with network simulator
          # Dropping packets from both sides of the stream to test dealing with lost packets
          command: SCENARIO="droplist --delay=15ms --bandwidth=10Mbps --queue=25 --drops_to_server=3,5,7 --drops_to_client=6,8" docker-compose -f utp-testing/docker/docker-compose.yml up -d
      - run:
          name: Wait all containers to start
          command: sleep 5
      - run:
          name: Check containers
          command: docker ps -a
      - run:
          name: Run test suite
          command: RUST_LOG=debug ./target/release/utp-test-suite
      - run:
          name: Stop containers
          command: docker-compose -f utp-testing/docker/docker-compose.yml down
workflows:
  merge-test:
    jobs:
      - docker-build:
          filters:
            branches:
              only: master
      - docker-publish:
          requires:
            - docker-build
          filters:
            branches:
              only: master
      - docker-build-bridge:
          filters:
            branches:
              only: master
      - docker-publish-bridge:
          requires:
            - docker-build-bridge
          filters:
            branches:
              only: master
      - cargo-fmt
      - cargo-clippy
      - build
      - test
      - check-windows
      - utp-test
